# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: hobbyloop-deploy-bucket
  AWS_CODE_DEPLOY_APPLICATION: hobbyloop-deploy
  AWS_CODE_DEPLOY_GROUP: hobbyloop-deploy-group

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'
        
    - name: Check current directory
      run: |
        pwd
        ls -la

    - name: Grant execute permission for gradlew
      run: chmod +x ./root/gradlew

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get secrets from AWS Parameter Store
      run: |
        aws ssm get-parameter --name "/api-gateway-server/secret" --with-decryption --query "Parameter.Value" --output text > ./api-gateway-server/src/main/resources/application-secret.yml
        aws ssm get-parameter --name "/api-gateway-server/swagger" --with-decryption --query "Parameter.Value" --output text > ./api-gateway-server/src/main/resources/application-swagger.yml
        aws ssm get-parameter --name "/company-service/secret" --with-decryption --query "Parameter.Value" --output text > ./company-service/src/main/resources/application-secret.yml
        aws ssm get-parameter --name "/company-service/db" --with-decryption --query "Parameter.Value" --output text > ./company-service/src/main/resources/application-db.yml
        aws ssm get-parameter --name "/company-service/oauth" --with-decryption --query "Parameter.Value" --output text > ./company-service/src/main/resources/application-oauth.yml
        aws ssm get-parameter --name "/company-service/s3" --with-decryption --query "Parameter.Value" --output text > ./company-service/src/main/resources/application-s3.yml
        aws ssm get-parameter --name "/company-service/swagger" --with-decryption --query "Parameter.Value" --output text > ./company-service/src/main/resources/application-swagger.yml
        aws ssm get-parameter --name "/ticket-service/db" --with-decryption --query "Parameter.Value" --output text > ./ticket-service/src/main/resources/application-db.yml
        aws ssm get-parameter --name "/ticket-service/s3" --with-decryption --query "Parameter.Value" --output text > ./ticket-service/src/main/resources/application-s3.yml
        aws ssm get-parameter --name "/ticket-service/swagger" --with-decryption --query "Parameter.Value" --output text > ./ticket-service/src/main/resources/application-swagger.yml
      working-directory: ./root
      
    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test
      working-directory: ./root

    - name: Upload Discovery Server to AWS S3
      run: |
        cd root/discovery-server
        zip -r $GITHUB_SHA-discovery-server.zip ./
        aws deploy push \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
          --ignore-hidden-files \
          --s3-location s3://$AWS_S3_BUCKET/$GITHUB_SHA-discovery-server.zip \
          --source ./

    - name: Upload Api Gateway Server to AWS S3
      run: |
        cd root/api-gateway-server
        zip -r $GITHUB_SHA-api-gateway-server.zip ./
        aws deploy push \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
          --ignore-hidden-files \
          --s3-location s3://$AWS_S3_BUCKET/$GITHUB_SHA-api-gateway-server.zip \
          --source ./

    - name: Upload Company Service to AWS S3
      run: |
        cd root/company-service
        zip -r $GITHUB_SHA-company-service.zip ./
        aws deploy push \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
          --ignore-hidden-files \
          --s3-location s3://$AWS_S3_BUCKET/$GITHUB_SHA-company-service.zip \
          --source ./

    - name: Upload Ticket Service to AWS S3
      run: |
        cd root/ticket-service
        zip -r $GITHUB_SHA-ticket-service.zip ./
        aws deploy push \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
          --ignore-hidden-files \
          --s3-location s3://$AWS_S3_BUCKET/$GITHUB_SHA-ticket-service.zip \
          --source ./

    - name: Deploy Discovery Server to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }}-discovery-server \
          --s3-location bucket=$AWS_S3_BUCKET,key=$GITHUB_SHA-discovery-server.zip,bundleType=zip

    - name: Deploy Api Gateway Server to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }}-api-gateway-server \
          --s3-location bucket=$AWS_S3_BUCKET,key=$GITHUB_SHA-api-gateway-server.zip,bundleType=zip

    - name: Deploy Company Service to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }}-company-service \
          --s3-location bucket=$AWS_S3_BUCKET,key=$GITHUB_SHA-company-service.zip,bundleType=zip

    - name: Deploy Ticket Service to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }}-ticket-service \
          --s3-location bucket=$AWS_S3_BUCKET,key=$GITHUB_SHA-ticket-service.zip,bundleType=zip
