# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: hobbyloop-deploy-bucket
  AWS_CODE_DEPLOY_APPLICATION: hobbyloop-deploy
  AWS_CODE_DEPLOY_GROUP: hobbyloop-deploy-group

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
    # (1) 기본 체크아웃
    steps:
    - name: production 브랜치로 이동
    - uses: actions/checkout@v4

    # (2) JDK 17 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'corretto'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    # - name: Setup Gradle
    #  uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    # (3) gradlew 권한 설정
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    # (4) Gradle 빌드 (테스트 제외)
    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test

    # (5) AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # (5) 마이크로서비스별 빌드 결과물을 S3 버킷에 업로드
    - name: Upload Discovery Server to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }}-discovery-server \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA-discovery-server.zip \
          --source ./discovery-server/build/libs
        
    # (5) 마이크로서비스별 빌드 결과물을 S3 버킷에 업로드
    - name: Upload Api Gateway Server to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }}-api-gateway-server \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA-api-gateway-server.zip \
          --source ./api-gateway-server/build/libs

    # (5) 마이크로서비스별 빌드 결과물을 S3 버킷에 업로드
    - name: Upload Company Service to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }}-company-service \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA-company-service.zip \
          --source ./company-service/build/libs
          
    # (5) 마이크로서비스별 빌드 결과물을 S3 버킷에 업로드
    - name: Upload Ticket Service to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }}-ticket-service \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA-ticket-service.zip \
          --source ./ticket-service/build/libs

      # (6) 마이크로서비스별 S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy discovery Server to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }}-discovery-server \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }}-discovery-server \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA-discovery-server.zip,bundleType=zip

      # (6) 마이크로서비스별 S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy Api Gateway Server to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }}-api-gateway-server \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }}-api-gateway-server \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA-api-gateway-server.zip,bundleType=zip

      # (6) 마이크로서비스별 S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy discovery Server to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }}-company-service \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }}-company-service \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA-company-service.zip,bundleType=zip

      # (6) 마이크로서비스별 S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy discovery Server to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }}-ticket-service \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }}-ticket-service \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA-ticket-service.zip,bundleType=zip
